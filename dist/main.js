(()=>{"use strict";const t=t=>{for(let e=0;e<11;e+=1){let d=e,r=document.createElement("div");r.classList.add("grid-row"),r.setAttribute("id",`grid-row-${e}`),r.setAttribute("data-row-number",`${e}`);for(let t=0;t<11;t+=1){let e=document.createElement("div");e.classList.add("grid-cell"),e.setAttribute("id",`grid-cell-${t}-${d}`),e.setAttribute("data-cell-coordinate",`${t}-${d}`),e.style.border="1px solid black",r.appendChild(e)}t.appendChild(r)}(()=>{const e=[];t.childNodes.forEach((t=>{e.push(t.firstChild)}));let d=1;e.forEach((t=>{t.style.border="none","0-0"!==t.getAttribute("data-cell-coordinate")&&(t.textContent=`${d}`,d+=1)}))})(),(()=>{const e=t.firstChild.childNodes;let d=0;e.forEach((t=>{t.style.border="none","0-0"!==t.getAttribute("data-cell-coordinate")&&(t.textContent=`${String.fromCharCode(65+d)}`,d+=1)}))})()};console.log("check check");const e=document.getElementById("computer-grid"),d=document.getElementById("player-grid");t(e),t(d)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUJBQU8sTUFBTUEsRUFBY0MsSUFDekIsSUFBSSxJQUFJQyxFQUFFLEVBQUVBLEVBQUUsR0FBR0EsR0FBRyxFQUFFLENBQ3BCLElBQUlDLEVBQU1ELEVBQ05FLEVBQVVDLFNBQVNDLGNBQWMsT0FDckNGLEVBQVFHLFVBQVVDLElBQUksWUFDdEJKLEVBQVFLLGFBQWEsS0FBSyxZQUFZUCxLQUN0Q0UsRUFBUUssYUFBYSxrQkFBa0IsR0FBR1AsS0FFMUMsSUFBSSxJQUFJQSxFQUFFLEVBQUVBLEVBQUUsR0FBR0EsR0FBRyxFQUFFLENBQ3BCLElBQ0lRLEVBQVdMLFNBQVNDLGNBQWMsT0FDdENJLEVBQVNILFVBQVVDLElBQUksYUFDdkJFLEVBQVNELGFBQWEsS0FBSyxhQUFhUCxLQUFLQyxLQUM3Q08sRUFBU0QsYUFBYSx1QkFBdUIsR0FBR1AsS0FBS0MsS0FDckRPLEVBQVNDLE1BQU1DLE9BQVMsa0JBQ3hCUixFQUFRUyxZQUFZSCxFQUN0QixDQUNBVCxFQUFLWSxZQUFZVCxFQUNuQixDQUVrQixNQUNoQixNQUFNVSxFQUFXLEdBQ05iLEVBQUtjLFdBRVhDLFNBQVNDLElBQ1pILEVBQVNJLEtBQUtELEVBQUVFLFdBQVcsSUFHN0IsSUFBSWpCLEVBQUksRUFDUlksRUFBU0UsU0FBU0MsSUFDaEJBLEVBQUVOLE1BQU1DLE9BQVMsT0FDNkIsUUFBM0NLLEVBQUVHLGFBQWEsMEJBR2xCSCxFQUFFSSxZQUFjLEdBQUduQixJQUNuQkEsR0FBSyxFQUFDLEdBQ04sRUFpQkpvQixHQWRxQixNQUNuQixNQUFNUixFQUFXYixFQUFLa0IsV0FBV0osV0FDakMsSUFBSWIsRUFBSSxFQUNSWSxFQUFTRSxTQUFTQyxJQUNoQkEsRUFBRU4sTUFBTUMsT0FBUyxPQUVLLFFBRENLLEVBQUVHLGFBQWEsMEJBSXRDSCxFQUFFSSxZQUFjLEdBQUdFLE9BQU9DLGFBQWEsR0FBS3RCLEtBQzVDQSxHQUFLLEVBQUMsR0FDTixFQUlKdUIsRUFBYyxFQ3REaEJDLFFBQVFDLElBQUksZUFFWixNQUFNQyxFQUFldkIsU0FBU3dCLGVBQWUsaUJBQ3ZDQyxFQUFhekIsU0FBU3dCLGVBQWUsZUFDM0M3QixFQUFXNEIsR0FDWDVCLEVBQVc4QixFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL0RPTS9jcmVhdGVHcmlkLmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgY3JlYXRlR3JpZCA9IChncmlkKSA9PiB7XG4gIGZvcihsZXQgaT0wO2k8MTE7aSs9MSl7XG4gICAgbGV0IHJvdyA9IGk7XG4gICAgbGV0IGdyaWRSb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBncmlkUm93LmNsYXNzTGlzdC5hZGQoJ2dyaWQtcm93Jyk7XG4gICAgZ3JpZFJvdy5zZXRBdHRyaWJ1dGUoJ2lkJyxgZ3JpZC1yb3ctJHtpfWApO1xuICAgIGdyaWRSb3cuc2V0QXR0cmlidXRlKCdkYXRhLXJvdy1udW1iZXInLGAke2l9YCk7XG4gICAgLy9QUk9CQUJMWSBET05UIE5FRUQgSUQgQU5EIERBVEEgQVRUUklCVVRFLCBCVVQgSSdMTCBDT01FIEJBQ0sgVE8gVEhJUy5cbiAgICBmb3IobGV0IGk9MDtpPDExO2krPTEpe1xuICAgICAgbGV0IGN1cnJlbnRSb3cgPSByb3dcbiAgICAgIGxldCBncmlkQ2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgZ3JpZENlbGwuY2xhc3NMaXN0LmFkZCgnZ3JpZC1jZWxsJyk7XG4gICAgICBncmlkQ2VsbC5zZXRBdHRyaWJ1dGUoJ2lkJyxgZ3JpZC1jZWxsLSR7aX0tJHtyb3d9YCk7XG4gICAgICBncmlkQ2VsbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtY2VsbC1jb29yZGluYXRlJyxgJHtpfS0ke3Jvd31gKTtcbiAgICAgIGdyaWRDZWxsLnN0eWxlLmJvcmRlciA9ICcxcHggc29saWQgYmxhY2snO1xuICAgICAgZ3JpZFJvdy5hcHBlbmRDaGlsZChncmlkQ2VsbCk7XG4gICAgfTtcbiAgICBncmlkLmFwcGVuZENoaWxkKGdyaWRSb3cpO1xuICB9O1xuXG4gIGNvbnN0IGxhYmVsUm93cyA9ICgpID0+IHtcbiAgICBjb25zdCBub2RlTGlzdCA9IFtdO1xuICAgIGxldCByb3dzID0gZ3JpZC5jaGlsZE5vZGVzO1xuXG4gICAgcm93cy5mb3JFYWNoKChlKT0+e1xuICAgICAgbm9kZUxpc3QucHVzaChlLmZpcnN0Q2hpbGQpO1xuICAgIH0pO1xuXG4gICAgbGV0IGkgPSAxO1xuICAgIG5vZGVMaXN0LmZvckVhY2goKGUpPT57XG4gICAgICBlLnN0eWxlLmJvcmRlciA9ICdub25lJztcbiAgICAgIGlmKGUuZ2V0QXR0cmlidXRlKCdkYXRhLWNlbGwtY29vcmRpbmF0ZScpID09PSAnMC0wJyl7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH07XG4gICAgICBlLnRleHRDb250ZW50ID0gYCR7aX1gO1xuICAgICAgaSArPSAxO1xuICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IGxhYmVsQ29sdW1ucyA9ICgpID0+IHtcbiAgICBjb25zdCBub2RlTGlzdCA9IGdyaWQuZmlyc3RDaGlsZC5jaGlsZE5vZGVzO1xuICAgIGxldCBpID0gMFxuICAgIG5vZGVMaXN0LmZvckVhY2goKGUpPT57XG4gICAgICBlLnN0eWxlLmJvcmRlciA9ICdub25lJztcbiAgICAgIGNvbnN0IGNlbGxDb29yZGluYXRlID0gZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtY2VsbC1jb29yZGluYXRlJyk7XG4gICAgICBpZihjZWxsQ29vcmRpbmF0ZSA9PT0gJzAtMCcpe1xuICAgICAgICByZXR1cm47XG4gICAgICB9O1xuICAgICAgZS50ZXh0Q29udGVudCA9IGAke1N0cmluZy5mcm9tQ2hhckNvZGUoNjUgKyBpKX1gO1xuICAgICAgaSArPSAxO1xuICAgIH0pO1xuICB9O1xuXG4gIGxhYmVsUm93cygpO1xuICBsYWJlbENvbHVtbnMoKTtcbn07XG4iLCJjb25zb2xlLmxvZygnY2hlY2sgY2hlY2snKVxuaW1wb3J0IHsgY3JlYXRlR3JpZCB9IGZyb20gXCIuL0RPTS9jcmVhdGVHcmlkXCJcbmNvbnN0IGNvbXB1dGVyR3JpZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb21wdXRlci1ncmlkJyk7XG5jb25zdCBwbGF5ZXJHcmlkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYXllci1ncmlkJyk7XG5jcmVhdGVHcmlkKGNvbXB1dGVyR3JpZCk7XG5jcmVhdGVHcmlkKHBsYXllckdyaWQpOyJdLCJuYW1lcyI6WyJjcmVhdGVHcmlkIiwiZ3JpZCIsImkiLCJyb3ciLCJncmlkUm93IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwic2V0QXR0cmlidXRlIiwiZ3JpZENlbGwiLCJzdHlsZSIsImJvcmRlciIsImFwcGVuZENoaWxkIiwibm9kZUxpc3QiLCJjaGlsZE5vZGVzIiwiZm9yRWFjaCIsImUiLCJwdXNoIiwiZmlyc3RDaGlsZCIsImdldEF0dHJpYnV0ZSIsInRleHRDb250ZW50IiwibGFiZWxSb3dzIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwibGFiZWxDb2x1bW5zIiwiY29uc29sZSIsImxvZyIsImNvbXB1dGVyR3JpZCIsImdldEVsZW1lbnRCeUlkIiwicGxheWVyR3JpZCJdLCJzb3VyY2VSb290IjoiIn0=