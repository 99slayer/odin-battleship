(()=>{"use strict";const e=(e,t)=>{for(let n=0;n<11;n+=1){let l=n,r=document.createElement("div");r.classList.add("grid-row"),r.setAttribute("id",`grid-row-${n}`),r.setAttribute("data-row-number",`${n}`);for(let e=0;e<11;e+=1){let n=document.createElement("div");n.classList.add("grid-cell"),n.classList.add(`grid-cell-${t}`),n.setAttribute("id",`grid-cell-${e}-${l}`),n.setAttribute("data-cell-coordinate",`${e}-${l}`),n.style.border="1px solid black",r.appendChild(n)}e.appendChild(r)}(()=>{const t=[];e.childNodes.forEach((e=>{t.push(e.firstChild)}));let n=1;t.forEach((e=>{e.style.border="none","0-0"!==e.getAttribute("data-cell-coordinate")&&(e.textContent=`${n}`,n+=1)}))})(),(()=>{const t=e.firstChild.childNodes;let n=0;t.forEach((e=>{e.style.border="none","0-0"!==e.getAttribute("data-cell-coordinate")&&(e.textContent=`${String.fromCharCode(65+n)}`,n+=1)}))})()},t=e=>{if("string"!=typeof e)return;let t=e.split("");return(e=>{let t;t=isNaN(parseInt(e[1]))?e[0]:e.slice(0,2).join("");let n=parseInt(t);return String.fromCharCode(65+n-1)})(t)+(e=>{let t;return t=isNaN(parseInt(e[e.length-2]))?e[e.length-1]:e.slice(e.length-2).join(""),t})(t)},n=(e,t=!1)=>{const n=e,l=(()=>{const e=[],t=[];return{attacks:t,place:t=>{let n=(e=>{let t=e,n=t.length,l=0;return{coordinates:t,hit:()=>{l+=1},isSunk:()=>n===l,getDamage:()=>l}})(t);return e.push(n),n},receiveAttack:n=>{if(t.includes(n))return;let l=e.findIndex((e=>e.coordinates.includes(n)));l>-1&&e[l].hit(),t.push(n)},fleetCoordinates:()=>{const t=[];for(let n=0;n<e.length;n+=1)t.push(e[n].coordinates);return t},getShipsRemaining:()=>{let t=0;return e.forEach((e=>{e.isSunk()&&(t+=1)})),e.length-t},isFleetSunk:()=>!!e.every((e=>e.isSunk()))}})(),r=t;return{board:l,computer:r,isTurn:!1,makeAttack:(e,t=null)=>{let n=t;r&&(n=((e,t=1)=>{const n=()=>Math.floor(10*Math.random())+65;let l=String.fromCharCode(n()),r=Math.floor(10*Math.random()+1),o=l+r;if(e.attacks.includes(o))do{l=String.fromCharCode(n()),r=Math.floor(10*Math.random()+1),o=l+r}while(e.attacks.includes(o));return o})(e)),e.attacks.includes(n)?console.log("square has already been hit."):(e.receiveAttack(n),console.log(`computer has attacked ${n}.`))},getName:()=>n,getWins:()=>0}},l=(e,t)=>{const n=document.getElementById("player-one-display"),l=document.getElementById("player-two-display");e.isTurn?(n.classList.add("current-player"),l.classList.remove("current-player")):t.isTurn&&(l.classList.add("current-player"),n.classList.remove("current-player"))},r=(e,t)=>{e.isTurn?(e.isTurn=!1,t.isTurn=!0,console.log(`IT IS NOW ${t.getName()}s TURN.`)):t.isTurn&&(e.isTurn=!0,t.isTurn=!1,console.log(`IT IS NOW ${e.getName()}s TURN.`))};let o,a;const c=(e,n)=>{const l=n.board.fleetCoordinates().reduce(((e,t)=>e.concat(t)));e.forEach((e=>{let r=t(e.getAttribute("data-cell-coordinate"));l.includes(r)&&n.board.attacks.includes(r)?e.textContent="●":!l.includes(r)&&n.board.attacks.includes(r)?e.textContent="/":l.includes(r)&&(e.textContent="○")}))},d=document.getElementById("player-one-display"),s=document.getElementById("player-two-display"),i=(e,t)=>{const n=document.createElement("div");n.classList.add("display-cont");const l=document.createElement("h1");l.textContent=`PLAYER ${t}`;const r=document.createElement("h3");r.textContent=`${e.getName()}`;const o=document.createElement("p");o.textContent=`${e.isTurn}`;const a=document.createElement("p");a.textContent=`Ships left: ${e.board.getShipsRemaining()}`;const c=document.createElement("p");c.textContent=`Wins: ${e.getWins()}`,n.append(l,r,o,a,c),1===t?d.append(n):2===t&&s.append(n)},u=document.getElementById("menu-multiplayer"),m=document.getElementById("menu-names"),g=(document.getElementById("menu-rules"),document.getElementById("single-player")),p=document.getElementById("two-player"),h=document.getElementById("player-one-name"),y=document.getElementById("start"),E=e=>{e.style.display="none"},A=e=>{e.style.display=null},b=(g.addEventListener("click",(()=>{E(u),A(m),multiplayer=!1})),p.addEventListener("click",(()=>{E(u),A(m),multiplayer=!0})),y.addEventListener("click",(()=>{let e=[h.value,"computer"],t=e[0],l=e[1];""!==t&&""!==l&&(((e,t)=>{let l=!0;"computer"===t&&(l=!1),o=n(e),a=n(t,l),o.board.place(["A2","A3","A4"]),o.board.place(["E3","F3","G3"]),o.board.place(["A1","B1","C1","D1"]),o.board.place(["C10","D10","E10","F10"]),a.board.place(["A4","B4","C4"]),a.board.place(["A5","A6","A7"]),a.board.place(["E5","F5","G5","H5"]),a.board.place(["E6","E7","E8","E9"]),c(document.querySelectorAll(".grid-cell-1"),o),c(document.querySelectorAll(".grid-cell-2"),a),((e,t)=>{let n=Math.floor(10*Math.random()+1);n%2==0?(e.isTurn=!0,console.log(`${e.getName()} GOES FIRST.`)):n%2!=0&&(t.isTurn=!0,console.log(`${t.getName()} GOES FIRST.`))})(o,a),o.isTurn&&o.computer?(o.makeAttack(a.board),changeTurn(o,a),highlight(o,a),c(document.querySelectorAll(".grid-cell-1"),o),c(document.querySelectorAll(".grid-cell-2"),a)):a.isTurn&&a.computer&&(a.makeAttack(o.board),changeTurn(o,a),highlight(o,a),c(document.querySelectorAll(".grid-cell-1"),o),c(document.querySelectorAll(".grid-cell-2"),a))})(t,l),i(o,1),i(a,2),h.value="",E(m))})),document.getElementById("player-one-grid")),k=document.getElementById("player-two-grid");e(b,1),e(k,2),document.querySelectorAll(".grid-cell").forEach((e=>{e.addEventListener("click",(e=>{let n=(d=e.target,t(d.getAttribute("data-cell-coordinate")));var d;console.log(`coordinate: ${n}`),(async(e,t,n)=>{e.isTurn?(e.makeAttack(t.board,n),r(e,t),l(e,t)):t.isTurn&&(t.makeAttack(e.board,n),r(e,t),l(e,t)),e.computer?(e.makeAttack(t.board),r(e,t),l(e,t)):t.computer&&(r(e,t),l(e,t)),c(document.querySelectorAll(".grid-cell-1"),e),c(document.querySelectorAll(".grid-cell-2"),t)})(o,a,n)}))})),console.log("check check")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,