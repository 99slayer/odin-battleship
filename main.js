(()=>{"use strict";const e=(e,t)=>{for(let n=0;n<11;n+=1){let l=n,a=document.createElement("div");a.classList.add("grid-row"),a.setAttribute("id",`grid-row-${n}`),a.setAttribute("data-row-number",`${n}`);for(let e=0;e<11;e+=1){let n=document.createElement("div");n.classList.add("grid-cell"),n.classList.add(`grid-cell-${t}`),n.setAttribute("id",`grid-cell-${e}-${l}`),n.setAttribute("data-cell-coordinate",`${e}-${l}`),n.style.border="1px solid black",a.appendChild(n)}e.appendChild(a)}(()=>{const t=[];e.childNodes.forEach((e=>{t.push(e.firstChild)}));let n=1;t.forEach((e=>{e.style.border="none","0-0"!==e.getAttribute("data-cell-coordinate")&&(e.textContent=`${n}`,n+=1)}))})(),(()=>{const t=e.firstChild.childNodes;let n=0;t.forEach((e=>{e.style.border="none","0-0"!==e.getAttribute("data-cell-coordinate")&&(e.textContent=`${String.fromCharCode(65+n)}`,n+=1)}))})()},t=(e,t)=>{const n=t.board.fleetCoordinates().reduce(((e,t)=>e.concat(t)));e.forEach((e=>{let l=(e=>{if("string"!=typeof e)return;let t=e.split("");return(e=>{let t;t=isNaN(parseInt(e[1]))?e[0]:e.slice(0,2).join("");let n=parseInt(t);return String.fromCharCode(65+n-1)})(t)+(e=>{let t;return t=isNaN(parseInt(e[e.length-2]))?e[e.length-1]:e.slice(e.length-2).join(""),t})(t)})(e.getAttribute("data-cell-coordinate"));n.includes(l)&&t.board.attacks.includes(l)?e.textContent="●":!n.includes(l)&&t.board.attacks.includes(l)?e.textContent="/":n.includes(l)&&(e.textContent="○")}))},n=(e,t=!1)=>{const n=e,l=(()=>{const e=[],t=[];return{attacks:t,place:t=>{let n=(e=>{let t=e,n=t.length,l=0;return{coordinates:t,hit:()=>{l+=1},isSunk:()=>n===l,getDamage:()=>l}})(t);return e.push(n),n},receiveAttack:n=>{if(t.includes(n))return;let l=e.findIndex((e=>e.coordinates.includes(n)));l>-1&&e[l].hit(),t.push(n)},fleetCoordinates:()=>{const t=[];for(let n=0;n<e.length;n+=1)t.push(e[n].coordinates);return t},getShipsRemaining:()=>{let t=0;return e.forEach((e=>{e.isSunk()&&(t+=1)})),e.length-t},isFleetSunk:()=>!!e.every((e=>e.isSunk()))}})();return{board:l,isTurn:!1,makeAttack:(e,n=null)=>{let l=n;t&&(l=((e,t=1)=>{const n=()=>Math.floor(10*Math.random())+65;let l=String.fromCharCode(n()),a=Math.floor(10*Math.random()+1),r=l+a;if(e.attacks.includes(r))do{l=String.fromCharCode(n()),a=Math.floor(10*Math.random()+1),r=l+a}while(e.attacks.includes(r));return r})(e)),e.attacks.includes(l)?console.log("square has already been hit."):e.receiveAttack(l)},getName:()=>n,getWins:()=>0}};let l,a;const r=document.getElementById("player-one-display"),o=document.getElementById("player-two-display"),d=(e,t)=>{const n=document.createElement("div");n.classList.add("display-cont");const l=document.createElement("h1");l.textContent=`PLAYER ${t}`;const a=document.createElement("h3");a.textContent=`${e.getName()}`;const d=document.createElement("p");d.textContent=`${e.isTurn}`;const c=document.createElement("p");c.textContent=`Ships left: ${e.board.getShipsRemaining()}`;const i=document.createElement("p");i.textContent=`Wins: ${e.getWins()}`,n.append(l,a,d,c,i),1===t?r.append(n):2===t&&o.append(n)},c=document.getElementById("menu-multiplayer"),i=document.getElementById("menu-names"),s=(document.getElementById("menu-rules"),document.getElementById("single-player")),u=document.getElementById("two-player"),m=document.getElementById("player-one-name"),p=document.getElementById("start"),g=e=>{e.style.display="none"},h=e=>{e.style.display=null},E=(s.addEventListener("click",(()=>{g(c),h(i),multiplayer=!1})),u.addEventListener("click",(()=>{g(c),h(i),multiplayer=!0})),p.addEventListener("click",(()=>{let e=[m.value,"computer"],r=e[0],o=e[1];""!==r&&""!==o&&(((e,r)=>{let o=!0;"computer"===r&&(o=!1),l=n(e),a=n(r,o),l.board.place(["A2","A3","A4"]),l.board.place(["E3","F3","G3"]),l.board.place(["A1","B1","C1","D1"]),l.board.place(["C10","D10","E10","F10"]),a.board.place(["A4","B4","C4"]),a.board.place(["A5","A6","A7"]),a.board.place(["E5","F5","G5","H5"]),a.board.place(["E6","E7","E8","E9"]),((e,t)=>{let n=Math.floor(10*Math.random()+1);n%2==0?e.isTurn=!0:n%2!=0&&(t.isTurn=!0)})(l,a),l.makeAttack(a.board,"A4"),l.makeAttack(a.board,"E1"),l.makeAttack(a.board,"E3"),l.makeAttack(a.board,"E5"),l.makeAttack(a.board,"E5"),t(document.querySelectorAll(".grid-cell-1"),l),t(document.querySelectorAll(".grid-cell-2"),a)})(r,o),d(l,1),d(a,2),m.value="",g(i))})),document.getElementById("player-one-grid")),y=document.getElementById("player-two-grid");e(E,1),e(y,2),document.querySelectorAll(".grid-cell").forEach((e=>{e.addEventListener("click",(e=>{console.log(e.target)}))})),console.log("check check")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,